diff --git a/Common/mkfb.c b/Common/mkfb.c
index 3b2f047..4e979b4 100644
--- a/Common/mkfb.c
+++ b/Common/mkfb.c
@@ -45,6 +45,13 @@
 # include <errno.h>
 #endif /*]*/
 
+#ifdef __MVS__
+#define _AE_BIMODAL 1
+#include <_Ccsid.h>
+#include <fcntl.h>
+#include <sys/stat.h>
+#endif
+
 #define BUFSZ	1024		/* input line buffer size */
 #define ARRSZ	8192		/* output array size */
 #define SSSZ	10		/* maximum nested ifdef */
@@ -102,9 +109,55 @@ usage(void)
     exit(1);
 }
 
-/*
-* Wrapper around Windows' brain-dead tmpfile().
-*/
+#ifdef __MVS__
+#include <fcntl.h>
+
+int __chgfdccsid(int, int);
+int __disableautocvt(int);
+
+FILE* __tmpfiletxt(void)
+{
+        FILE* f;
+        char* n;
+        f = tmpfile();
+
+        if (f == NULL) {
+                return NULL;
+        } else {
+                /*
+                 * Underlying descriptor needs to be W+ and not WB+
+                 */
+                int fno = fileno(f);
+
+                int rc = fcntl(fno, F_SETFD, O_RDWR|O_CREAT|O_APPEND);
+                if (rc) {
+                        return NULL;
+                }
+        }
+        int fd = fileno(f);
+        if (__chgfdccsid(fd, 819)) {
+                return NULL;
+        }
+        return f;
+}
+
+FILE *__freopentxt(const char *filename, const char *mode, FILE *stream)
+{
+        FILE* fp = freopen(filename, mode, stream);
+        if (!fp) {
+                return NULL;
+        }
+        int fno = fileno(fp);
+        if (__chgfdccsid(fno, 819) || __disableautocvt(fno)) {
+                return NULL;
+        }
+        return fp;
+}
+
+#define freopen __freopentxt
+
+#endif
+
 static FILE *
 mkfb_tmpfile(void)
 {
@@ -113,25 +166,33 @@ mkfb_tmpfile(void)
     char *n;
 #endif /*]*/
 
-#if !defined(_WIN32) /*[*/
+#if !defined(_WIN32) && !defined(__MVS__) /*[*/
     f = tmpfile();
     if (f == NULL) {
-	perror("tmpfile");
-	exit(1);
+        perror("tmpfile");
+        exit(1);
     }
 #else /*][*/
-    n = _tempnam(NULL, "mkfb");
-    if (n == NULL) {
-	fprintf(stderr, "_tempnam failed.\n");
-	exit(1);
-    }
-    f = fopen(n, "w+b");
-    if (f == NULL) {
-	fprintf(stderr, "_tempnam open(\"%s\") failed: %s\n", n,
-		strerror(errno));
-	exit(1);
-    }
-    free(n);
+        #if defined(_WIN32)
+            n = _tempnam(NULL, "mkfb");
+            if (n == NULL) {
+                fprintf(stderr, "_tempnam failed.\n");
+                exit(1);
+            }
+            f = fopen(n, "w+b");
+            if (f == NULL) {
+                fprintf(stderr, "_tempnam open(\"%s\") failed: %s\n", n,
+                        strerror(errno));
+                exit(1);
+            }
+            free(n);
+        #else
+            f = __tmpfiletxt();
+            if (f == NULL) {
+                perror("tmpfile");
+                exit(1);
+            }
+        #endif
 #endif /*]*/
 
     return f;
@@ -179,6 +240,7 @@ main(int argc, char *argv[])
     }
     infiles = argc - ix;
 
+
     /* Open the output file. */
     if (ofile) {
 	if (freopen(ofile, "w", stdout) == NULL) {
@@ -482,6 +544,17 @@ main(int argc, char *argv[])
 	rewind(tc);
 	rewind(tm);
     }
+
+#ifdef __MVS__
+	struct f_cnvrt req = {QUERYCVT, 0, 0};
+	int rc = fcntl(fileno(stdout), F_CONTROL_CVT, &req);
+	if (!rc) {
+		fprintf(stderr, "Control fields: %d %d %d\n", req.cvtcmd, req.pccsid, req.fccsid);
+	} else {
+		fprintf(stderr, "failed to query stdout file descriptor\n");
+	}
+#endif
+
     while (fgets(buf, sizeof(buf), t) != NULL) {
 	printf("%s", buf);
     }
